@page "/todo/details/{Id:int}"
@page "/todo/create"

@using DataAccess.Models
@using Services
@using global::Todo.Blazor.Pages.Components

@inject IToDoService _todoService
@inject IToastService _toastService
@inject NavigationManager _navigationManager

<div class="container d-flex justify-content-center m-0 p-0">
    <EditForm Model="@Todo" OnValidSubmit="HandleOnValidSubmit" class="col-sm-12 col-md-10 col-lg-8 p-0">

        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="@Todo.Title" class="form-control" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="@Todo.Description" class="form-control" rows="5" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-sm btn-primary" hidden="@(Id == null)"><i class="fas fa-save pr-2"></i>Save</button>
            <button type="submit" class="btn btn-sm btn-success" hidden="@(Id != null)"><i class="fas fa-plus pr-2"></i>Create</button>
            <a href="/todos" class="btn btn-sm btn-secondary"><i class="fas fa-times pr-2"></i>Cancel</a>
            <button type="button" class="btn btn-sm btn-danger float-right" hidden="@(Id == null)" @onclick="(async () => await ShowConfirmationModal())"><i class="fas fa-trash pr-2"></i>Delete</button>
        </div>
        @if (Id != null)
        {
            <hr />
            <label>Created on: @Todo.DateCreated</label> <br />
            <label>Updated on: @Todo.DateUpdated</label>
        }
    </EditForm>
</div>

@code {
    [Parameter] 
    public int? Id { get; set; }
    public ToDo Todo = new ToDo();

    [CascadingParameter] IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Todo = _todoService.Get(Id.Value);
        }
    }

    protected void HandleOnValidSubmit()
    {
        try
        {
            if (Id != null)
            {
                _todoService.Update(Todo);
                _toastService.ShowSuccess("Todo successfully updated", "Succes!");
            }
            else
            {
                _todoService.Create(Todo);
                _navigationManager.NavigateTo($"todo/details/{Todo.Id}");
                _toastService.ShowSuccess("Todo successfully created", "Succes!");
            }
            

        } 
        catch (Exception ex)
        {
            _toastService.ShowError($"Error saving todo. Error: {ex.Message}");
        }
    }

    private async Task ShowConfirmationModal()
    {
        var parameters = new ModalParameters();
        parameters.Add("TodoId", Id);

        var confirmationModal = Modal.Show<ConfirmationModal>("Delete todo?", parameters);
        var result = await confirmationModal.Result;

        if (!result.Cancelled)
        {
            _toastService.ShowSuccess("Todo has been deleted!", "Success!");
            _navigationManager.NavigateTo("todos");
        }
    }
}